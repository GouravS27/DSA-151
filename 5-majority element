-------------------------C++-------------------------------
int majorityElement(vector<int>& nums) {
        int n=nums.size();
        unordered_map<int,int>m;

        for(int i=0;i<n;i++)
        {
            m[nums[i]]++;
        }
        n=n/2;
        for(auto x:m)
        {
            if(x.second>n) return x.first;
        }
        return 0;
    }
-----------------------JAVA--------------------------------
public int majorityElement(int[] nums) {
       int n=nums.length;
       Map<Integer,Integer> m=new HashMap<>();

       for(int i=0;i<n;i++)
       {
           m.put(nums[i],m.getOrDefault(nums[i],0)+1);
       }
       n=n/2;
       for(Map.Entry<Integer,Integer> entry:m.entrySet())
       {
           if(entry.getValue()>n)
           {
               return entry.getKey();
           }
       }
       return 0;
    }

    -------------------PYTHON--------------------------------
  def majorityElement(self, nums: List[int]) -> int:
        n=len(nums)
        m=defaultdict(int)

        for i in nums:
            m[i]+=1
        
        n=n//2

        for key,value in m.items():
            if value>n:
                return key
        
        return 0
